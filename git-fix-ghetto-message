#!/usr/bin/env perl

use 5.12.0;
use warnings;

my $svn_id;
my $msg = '';

while (<>) {
   if ( /^git-svn-id: (.*)/ ) {
      $svn_id = $1;
   } else {
      $msg .= $_;
   }
}

# if this is a merge commit, rewrite the message to have a better "subject"
if ( $msg =~ /^\s*r\d+\@.*\(orig r\d+\):/ ) {
   # print the original message
   $msg =~ s/^ //mg;

   my ( $to, @from ) = ( split /\s+/, `git show -s --pretty='format:%P' $ENV{GIT_COMMIT}` );

   if (scalar @from) {
      print "Merge ",
         join(", ", map { format_branch($_) } @from),
         " into ",
         format_branch($to),
         "\n\n", $msg;
   } else {
      my @dumb = grep { /^\s*r\d+\@.*\(orig r\d+\):/ } split /\n/, $msg;
      my @msg = map { /^\s*(?:\*\s+)?(.*?)\s*$/; $1 } grep { !/^\s*r\d+\@.*\(orig r\d+\):/ } split /\n/, $msg;
      print join "\n", @msg, @dumb;
   }
} else {
   if ( $msg =~ s/^\s*r\d+\@.*:.*$//m ) {
      $msg =~ s/^ //mg;
   }

   print join "\n", map { /^\s*(?:\*\s+)?(.*?)\s*$/; $1 } split /\n/, $msg;
}

sub format_branch {
   my $commit = shift;

   my $body = `git show -s --pretty='format:%b' $commit`;

   if ( $body =~ m{git-svn-id: .*/branches/(.*?)\@} ) {
      return "'$1'";
   } elsif ( $body =~ m{git-svn-id: .*/trunk\@} ) {
      return "'trunk'";
   } elsif ( $body =~ m{git-svn-id: .*/trunk/SQL-Abstract\@} ) {
      return "'trunk'";
   } elsif ( $body =~ /\@r(\d+)/ ) {
      return $1;
   } else {
      die "unknown rev for $commit";
   }
}

__END__

# r2279@metis (orig r1):  nwiger | 2006-09-28 04:06:33 +0100
# initial "import"

# should just be

# initial "import"

# ALSO

# r2298@metis (orig r20):  matthewt | 2007-02-07 13:46:06 +0000
#  r33610@cain (orig r9):  matthewt | 2006-11-13 09:14:03 +0000
#  abstract from code imported from DBIC::SQL::Abstract plus tests

# should just be

# abstract from code imported from DBIC::SQL::Abstract plus tests

# r5582@vger:  mendel | 2009-02-15 15:29:13 +0100
#  * Fixed a bug in hashpair with literal SQL and bind value (ie. col => { op => \[$sql, @bind] }) when bindty
#  * Added tests for hashpair with literal SQL and bind value (ie. col => { op => \[$sql, @bind] }) when bindt

# should just be

# Fixed a bug in hashpair with literal SQL and bind value (ie. col => { op => \[$sql, @bind] }) when bindty
# Added tests for hashpair with literal SQL and bind value (ie. col => { op => \[$sql, @bind] }) when bindt

my @out;
open my $fh, "<", "/home/frew/parentlist";
my @p = grep { $_ && $_ ne '-p' } split /\s/, <$fh>;
if (@p > 1) {
   print ""
} else {
   my @lines = <>;
   for (@lines) {
      unless (/^\s*r\d+\@\w+(\s+\(orig\s+r\d+\))?:\s+\w+\s+\|\s+\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}:\d{2}\s+\+\d{4}\s*$/) {
         /(?:\s*)(?:\*\s+)?(.*)\s*/;
         push @out, $1;
      }
   }
}
print join "\n", @out;
